---
import type { MarkdownInstance } from "astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import type { Frontmatter } from "../../type";

type Post = MarkdownInstance<Frontmatter>;

export async function getStaticPaths() {
  const allPosts: Post[] = await Astro.glob<Frontmatter>("../posts/*.md");
  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.frontmatter.tags.includes(tag)
    );
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

type Props = {
  posts: Post[];
};

const { tag } = Astro.params;
const { posts } = Astro.props;

const filteredPosts = posts.filter((post: Post) =>
  post.frontmatter.tags?.includes(tag)
);
---

<BaseLayout pageTitle={tag}>
  <p>{tag}のタグが付いた記事</p>
  <ul>
    {
      filteredPosts.map((post) => (
        <li>
          <a href={post.url}>{post.frontmatter.title}</a>
        </li>
      ))
    }
  </ul>
</BaseLayout>
